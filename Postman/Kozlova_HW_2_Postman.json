{
	"info": {
		"_postman_id": "28f410c5-23c9-4040-bfa6-2a5785c6b764",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"first\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.json();\r",
							"var reqData = request.data;\r",
							"var age = +respData.age\r",
							"let req_name = reqData.name\r",
							"let req_age = +reqData.age\r",
							"let req_salary = +reqData.salary\r",
							"let req_u_salary_1_5_year = +respData.family.u_salary_1_5_year\r",
							"\r",
							"console.log(\"name is \" +respData.name)\r",
							"console.log(\"age is \" +respData.age)\r",
							"console.log(\"salary is \" +respData.salary)\r",
							"console.log(typeof(req_age))\r",
							"console.log(respData.family)  //Вывести в консоль параметр family из response.\r",
							"console.log(respData.family.u_salary_1_5_year)\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(respData.name).to.eql('John');\r",
							"});  //Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(age).to.eql(30);\r",
							"}); //Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(respData.salary).to.eql(5000);\r",
							"}); // Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(respData.name).to.eql(req_name);\r",
							"}); //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(age).to.eql(req_age);\r",
							"}); //Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(respData.salary).to.eql(req_salary);\r",
							"}); //Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_1_5_year_check\", function () {\r",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(req_salary*4);\r",
							"}); //Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.json();\r",
							"var reqData = request.data;\r",
							"var age = +respData.age\r",
							"let req_name = pm.request.url.query.get('name')\r",
							"let req_age = +pm.request.url.query.get('age')\r",
							"let req_salary = +pm.request.url.query.get('salary')\r",
							"\r",
							"console.log(\"name is \" +respData.name)\r",
							"console.log(\"age is \" +respData.age)\r",
							"console.log(\"salary is \" +respData.salary)\r",
							"console.log(respData.family) //Вывести в консоль параметр family из response.\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(respData.name).to.eql(req_name);\r",
							"}); //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(age).to.eql(req_age);\r",
							"}); //Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"salary_check\", function () {\r",
							"    pm.expect(respData.salary).to.eql(req_salary);\r",
							"}); //Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"dog_name_check\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"name\");\r",
							"}); //Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"dog_age_check\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"age\");\r",
							"}); //Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"name_Luky_check\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql('Luky');\r",
							"}); //Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"age_4_check\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"}); //Проверить, что параметр age имеет значение 4."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Javier&age=25&salary=6000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Javier"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "6000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.json();\r",
							"var reqData = request.data;\r",
							"let req_name = pm.request.url.query.get('name')\r",
							"let req_age = +pm.request.url.query.get('age')\r",
							"let req_salary = +pm.request.url.query.get('salary')\r",
							"\r",
							"\r",
							"console.log(\"name is \" +respData.name)\r",
							"console.log(\"age is \" +respData.age)\r",
							"console.log(\"salary is \" +respData.salary) //Вывести в консоль параметр salary из response.\r",
							"console.log(\"salary is \" +req_salary) //Вывести в консоль параметр salary из request.\r",
							"console.log(respData.salary[0]) \r",
							"console.log(+respData.salary[1])\r",
							"console.log(+respData.salary[2])\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(respData.name).to.eql(req_name);\r",
							"}); //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(respData.age).to.eql(req_age);\r",
							"}); //Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"salary_check_0\", function () {\r",
							"    pm.expect(respData.salary[0]).to.eql(req_salary);\r",
							"}); //Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_check_1\", function () {\r",
							"    pm.expect(respData.salary[1]).to.eql+(req_salary*2);\r",
							"}); //Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_check_2\", function () {\r",
							"    pm.expect(respData.salary[2]).to.eql+(req_salary*3);\r",
							"}); //Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.environment.set(\"name\", req_name); //Передать в окружение переменную name\r",
							"pm.environment.set(\"age\", req_age);   //Передать в окружение переменную age\r",
							"pm.environment.set(\"salary\", req_salary); //Передать в окружение переменную salary\r",
							"\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							" \r",
							"for (let salary_array of respData.salary) {  \r",
							"    console.log(salary_array);  \r",
							"} \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Catalina&age=32&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Catalina"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.json();\r",
							"var reqData = request.data;\r",
							"let req_salary = +reqData.salary\r",
							"let req_age = +reqData.age\r",
							"let person = respData.person;\r",
							"// console.log(JSON.stringify(req_person, null, 4));\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"param_start_qa_salary\", function () {\r",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");\r",
							"}); //Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"param_qa_salary_after_6_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");\r",
							"}); //Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"param_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");\r",
							"}); //Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"param_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"}); //Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"param_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"}); //Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"param_person\", function () {\r",
							"    pm.expect(respData).to.have.property(\"person\");\r",
							"}); //Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"start_qa_salary_check\", function () {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(req_salary);\r",
							"}); //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_after_6_months_check\", function () {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"}); //Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"salary_after_12_months_check\", function () {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"}); //Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year_check\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"}); //Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years_check\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"}); //Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"element_u_name_check\", function () {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql(req_salary);\r",
							"}); //Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"element_u_age_check\", function () {\r",
							"    pm.expect(respData.person.u_age).to.eql(req_age);\r",
							"}); //Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years_check\", function () {\r",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"}); //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (var prop in person) {\r",
							"  console.log(prop + \" = \" + person[prop]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "age",
			"value": "",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "",
			"type": "string"
		}
	]
}